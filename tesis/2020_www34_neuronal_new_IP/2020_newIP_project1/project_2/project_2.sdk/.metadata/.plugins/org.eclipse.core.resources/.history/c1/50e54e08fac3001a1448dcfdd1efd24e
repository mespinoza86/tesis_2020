
#include <iostream>
#include <string>
#include <cstring>
#include <math.h>
#include <memory>
#include <functional>
#include <chrono>
#include <vector>
#include <random>
#include <cassert>
#include "statistics.hpp"
#include "GapJunctionDriver.hpp"
#include "ip-test.h"
#include "xtime_l.h"

 XTime HW_compute_acc = 0;
 XTime HW_init_compute = 0;

auto makeGapJunctionIP(uint nsize){return GapJunctionIP{nsize};}
using vec = std::vector<float>;

auto runTest = [&](const vec &V,const vec &C,vec &outCurrents, std::vector<int> &times){
  auto nsize=V.size();
  std::cout << "Opening GapJunctionIP Driver devs...\n";
  XTime_GetTime(&HW_init_compute);
  auto gjip = makeGapJunctionIP(nsize);
  std::cout << "Ready\n";
  gjip.copyCondMatrix(C);
  for(auto &t : times){
  	//mespinoz auto begin = std::chrono::system_clock::now();
    gjip.copyVdend(V);
    gjip.run();
    uint idx = 0;
    for(auto &curr : outCurrents){curr = gjip.IcBuff(idx);idx++;}

    //mespinoz auto end = std::chrono::system_clock::now();
    //mespinoz auto elapsed = std::chrono::duration_cast<std::chrono::microseconds>(end-begin);
    //mespinoz t=elapsed.count();
  }
  XTime_GetTime(&HW_compute_acc);
  HW_compute_acc = HW_compute_acc - HW_init_compute;
  float print_fp=((float)HW_compute_acc)/CLOCKS_PER_SEC;
  printf("HW Time exec: %f\n",print_fp);


};

int main(int argc, char** argv){
  std::cout << "Init GPIP test\n";

  const std::vector<uint> sizes = 
  {
	  300,
  };
  for(auto &nsize : sizes ){
    const auto iterationsQuantity = uint(4);
    auto times = std::vector<int>(iterationsQuantity);
    std::cout << "\tNsize: " << nsize <<"\n";
    auto V_data = vec(nsize);
    auto C_data = vec(nsize*nsize);
    fillWithRandomData(V_data,C_data);
    auto outCurrents = vec(nsize);
    runTest(V_data,C_data,outCurrents,times);
    auto avgElapsed = average(times);
    auto standardDeviation = standard_deviation(times);
    std::cout<<std::dec << "Time: "<< avgElapsed<<"\n";
    std::cout<<std::dec << "Standard Deviation: "<< standardDeviation<<"\n";
    auto Isw = std::vector<float>(nsize);
    //mespinoz     auto begin = std::chrono::system_clock::now();
    SimulateSW(C_data,V_data,Isw);
    //mespinoz     auto end = std::chrono::system_clock::now();
    //mespinoz     auto elapsed = std::chrono::duration_cast<std::chrono::microseconds>(end-begin);
    //mespinoz     auto boost = static_cast<float>(elapsed.count())/avgElapsed;
    //mespinoz    std::cout << "SW perf: "<< elapsed.count() << "\n"<<"HW boost: "<<boost <<"\n";
    //compareResults(Isw,outCurrents);
    printf("Done compare result\n");
  }
  return 0;
}

