/* This is a sample demonstration application that showcases usage of remoteproc
and rpmsg APIs on the remote core. This application is meant to run on the remote CPU
running baremetal code. This applicationr receives two matrices from the master,
multiplies them and returns the result to the master core. */

#include "xil_printf.h"
#include "openamp/open_amp.h"
#include "matrix_multiply.h"
#include "platform_info.h"
#include <math.h>
#include "FreeRTOS.h"
#include "task.h"


#define	MAX_SIZE		6
#define NUM_MATRIX		2
// Cell properties///////////////////////////////////////////////////////////////////////////////////////////////
#define DELTA 0.05
//Conductance for neighbors' coupling
#define CONDUCTANCE 0.04
// Capacitance
#define C_M 1
// Somatic conductances (mS/cm2)
#define G_NA_S 150      // Na gate conductance (=90 in Schweighofer code, 70 in paper) 120 too little
#define G_KDR_S 9.0    // K delayed rectifier gate conductance (alternative value: 18)
#define G_K_S 5      // Voltage-dependent (fast) potassium
#define G_LS 0.016  // Leak conductance (0.015)
// Dendritic conductances (mS/cm2)
#define G_K_CA 35       // Potassium gate conductance (35)
#define G_CAH 4.5     // High-threshold Ca gate conductance (4.5)
#define G_LD 0.016   // Dendrite leak conductance (0.015)
#define G_H 0.125    // H current gate conductance (1.5) (0.15 in SCHWEIGHOFER 2004)
// Axon hillock conductances (mS/cm2)
#define G_NA_A 240      // Na gate conductance (according to literature: 100 to 200 times as big as somatic conductance)
#define G_NA_R 0      // Na (resurgent) gate conductance
#define G_K_A 20      // K voltage-dependent
#define G_LA 0.016  // Leak conductance
// Cell morphology
#define P1 0.25        // Cell surface ratio soma/dendrite (0.2)
#define P2 0.15      // Cell surface ratio axon(hillock)/soma (0.1)
#define G_INT 0.13       // Cell internal conductance (0.13)
// Reversal potentials
#define V_NA 55       // Na reversal potential (55)
#define V_K -75       // K reversal potential
#define V_CA 120       // Ca reversal potential (120)
#define V_H -43       // H current reversal potential
#define V_L 10       // leak current



#define SHUTDOWN_MSG	0xEF56A55A

#define LPRINTF(format, ...) xil_printf(format, ##__VA_ARGS__)
#define LPERROR(format, ...) LPRINTF("ERROR: " format, ##__VA_ARGS__)

typedef struct _matrix {
	unsigned int size;
	unsigned int elements[MAX_SIZE][MAX_SIZE];
} matrix;

//Added by mespinoz


//typedef double mod_prec;
typedef float mod_prec;

//Structs for internal calculations and general inputs
typedef struct Dend{
	mod_prec V_dend;
	mod_prec Hcurrent_q;
	mod_prec Calcium_r;
	mod_prec Potassium_s;
	mod_prec I_CaH;
	mod_prec Ca2Plus;
}Dend;

typedef struct Soma{
	mod_prec g_CaL;
	mod_prec V_soma;
	mod_prec Sodium_m;
	mod_prec Sodium_h;
	mod_prec Calcium_k;
	mod_prec Calcium_l;
	mod_prec Potassium_n;
	mod_prec Potassium_p;
	mod_prec Potassium_x_s;
}Soma;

typedef struct Axon{
	mod_prec V_axon;
	mod_prec Sodium_m_a;
	mod_prec Sodium_h_a;
	mod_prec Potassium_x_a;
}Axon;

typedef struct GapJunction {
        float Conductance;
        float Connectivity;
}GapJunction;


typedef struct cellState{
	 Dend dend;
	 Soma soma;
	 Axon axon;
	 GapJunction gj;
}cellState;

typedef struct channelParams{
	mod_prec v;
	mod_prec prevComp1, prevComp2;
	mod_prec newComp1, newComp2;
}channelParams;

typedef struct dendCurrVoltPrms{
	mod_prec iApp;
	mod_prec iC;
	mod_prec vDend;
	mod_prec vSoma;
	mod_prec q, r, s;
	mod_prec newVDend;
	mod_prec newI_CaH;
}dendCurrVoltPrms;

typedef struct somaCurrVoltPrms{
	mod_prec g_CaL;
	mod_prec vSoma;
	mod_prec vDend;
	mod_prec vAxon;
	mod_prec k, l, m, h, n, x_s;
	mod_prec newVSoma;
}somaCurrVoltPrms;

typedef struct axonCurrVoltPrms{
	mod_prec vSoma;
	mod_prec vAxon;
	mod_prec m_a, h_a, x_a;
	mod_prec newVAxon;
}axonCurrVoltPrms;



/* Local variables */
static TaskHandle_t comm_task;

static struct rpmsg_endpoint lept;
static int shutdown_req = 0;

/* External functions */
extern int init_system(void);
extern void cleanup_system(void);

mod_prec AxonPotassium(channelParams);
mod_prec AxonCurrVolt(axonCurrVoltPrms);

channelParams AxonSodium(channelParams);
Axon CompAxon(struct Axon const, mod_prec);

Axon CompAxon(Axon const prevAxon, mod_prec prevSoma){
	struct Axon a_output;
	struct channelParams chPrms, chPrmsNew;
	struct axonCurrVoltPrms chComps;

	// update somatic components
	// SCHWEIGHOFER:

	chPrms.v = prevAxon.V_axon;
	chPrms.prevComp1 =prevAxon.Sodium_h_a;

	//Sodium current calculation
	chPrmsNew = AxonSodium(chPrms);

	a_output.Sodium_h_a =  chPrmsNew.newComp1;
	a_output.Sodium_m_a =  chPrmsNew.newComp2;

	chPrms.v = prevAxon.V_axon;
	chPrms.prevComp1 = prevAxon.Potassium_x_a;

	//Potassium current calculation
	chPrmsNew.newComp1 = AxonPotassium(chPrms);

	a_output.Potassium_x_a =  chPrmsNew.newComp1;

	chComps.vSoma = prevSoma;
	chComps.vAxon = prevAxon.V_axon;
	//Compartment output calculation
	chComps.m_a = a_output.Sodium_m_a;
	chComps.h_a = a_output.Sodium_h_a;
	chComps.x_a = a_output.Potassium_x_a;
	chComps.newVAxon = AxonCurrVolt(chComps);

	a_output.V_axon =  chComps.newVAxon;
	return a_output;
}


channelParams AxonSodium(struct channelParams chPrms){

    mod_prec m_inf_a, h_inf_a, tau_h_a, dh_dt_a, m_a_local, h_a_local;

    //Get inputs
    mod_prec const prevV_axon = chPrms.v;
    mod_prec const prevSodium_h_a = chPrms.prevComp1;

    //opt for division by constant
    mod_prec const five_five = 1/5.5; //no change in area by synthesizer on V7
    mod_prec const five_eight = -1/5.8; //no change in area by synthesizer on V7
    mod_prec const thirty_three = 1/33.0;  //no change in area by synthesizer on V7

    // Update axonal Na components
    // NOTE: current has shortened inactivation to account for high
    // firing frequencies in axon hillock


/*mespinoz    m_inf_a   = 1 / (1 + (expf((-30 - prevV_axon) * five_five)));
    h_inf_a   = 1 / (1 + (expf((-60 - prevV_axon) * five_eight)));
    tau_h_a   =     1.5 * expf((-40 - prevV_axon) * thirty_three);*/
    dh_dt_a   = (h_inf_a - prevSodium_h_a)/tau_h_a;
    m_a_local = m_inf_a;
    h_a_local = prevSodium_h_a + DELTA * dh_dt_a;

    //Put result
    chPrms.newComp1 = h_a_local;
    chPrms.newComp2 = m_a_local;
    return chPrms;
}


mod_prec AxonPotassium(struct channelParams chPrms){

    mod_prec alpha_x_a, beta_x_a, x_a_local;

    //Get inputs
    mod_prec const prevV_axon = chPrms.v;
    mod_prec const prevPotassium_x_a = chPrms.prevComp1;

    //opt for division by constant
    mod_prec const ten = 0.1; //no change in area by synthesizer on V7

    // D'ANGELO 2001 -- Voltage-dependent potassium
    //mespinoz alpha_x_a = 0.13 * (prevV_axon + 25) / (1 - expf(-(prevV_axon + 25) * ten));
    //mespinoz    beta_x_a  = 1.69 * expf(-0.0125 * (prevV_axon + 35));
		x_a_local = DELTA * alpha_x_a + (1-(alpha_x_a+beta_x_a)*DELTA)*prevPotassium_x_a;

    //Put result
    chPrms.newComp1 = x_a_local;
    return chPrms.newComp1;
}


mod_prec AxonCurrVolt(struct axonCurrVoltPrms chComps){

    //Local variable
    mod_prec I_Na_a, I_la, I_sa, I_K_a, dVa_dt;

    //Get inputs
    mod_prec const prevV_soma = chComps.vSoma;
    mod_prec const prevV_axon = chComps.vAxon;
    mod_prec const m_a = chComps.m_a;
    mod_prec const h_a = chComps.h_a;
    mod_prec const x_a = chComps.x_a;

	mod_prec const inv_CM= 1/C_M;

    // AXONAL CURRENTS
    // Sodium
    I_Na_a  = G_NA_A  * m_a * m_a * m_a * h_a * (prevV_axon - V_NA);
    // Leak

    I_la    = G_LA * (prevV_axon - V_L);
    // Soma-axon interaction current I_sa
    I_sa    = (G_INT / P2) * (prevV_axon - prevV_soma);
    // Potassium (transient)
    I_K_a   = G_K_A * x_a *x_a *x_a *x_a * (prevV_axon - V_K);
    dVa_dt = (-(I_K_a + I_sa + I_la + I_Na_a)) * inv_CM;
    chComps.newVAxon = DELTA * dVa_dt + prevV_axon;

    return chComps.newVAxon;
}


/*-----------------------------------------------------------------------------*
 *  Calculate the Matrix
 *-----------------------------------------------------------------------------*/
static void Matrix_Multiply(const matrix *m, const matrix *n, matrix *r)
{
	unsigned int i, j, k;

	memset(r, 0x0, sizeof(matrix));
	r->size = m->size;

	for (i = 0; i < m->size; ++i) {
		for (j = 0; j < n->size; ++j) {
			for (k = 0; k < r->size; ++k) {
				r->elements[i][j] += m->elements[i][k] * n->elements[k][j];
			}
		}
	}
}

/*-----------------------------------------------------------------------------*
 *  RPMSG callbacks setup by remoteproc_resource_init()
 *-----------------------------------------------------------------------------*/
static int rpmsg_endpoint_cb(struct rpmsg_endpoint *ept, void *data, size_t len,
				 uint32_t src, void *priv)
{
	Axon *temp_axon;
	Axon *ready_axon;
	temp_axon = (Axon *)malloc(4*sizeof(Axon));
	int x_num;
	temp_axon = (Axon *) data;
	if (rpmsg_send(ept, temp_axon, 4*sizeof(Axon)) < 0) {
			LPERROR("rpmsg_send failed\n");
	}

	return RPMSG_SUCCESS;
}

static void rpmsg_service_unbind(struct rpmsg_endpoint *ept)
{
	(void)ept;
	LPERROR("Endpoint is destroyed\n");
	shutdown_req = 1;
}

/*-----------------------------------------------------------------------------*
 *  Application
 *-----------------------------------------------------------------------------*/
int app(struct rpmsg_device *rdev, void *priv)
{
	int ret;

	ret = rpmsg_create_ept(&lept, rdev, RPMSG_SERVICE_NAME,
				   0, RPMSG_ADDR_ANY, rpmsg_endpoint_cb,
				   rpmsg_service_unbind);
	if (ret) {
		LPERROR("Failed to create endpoint.\n");
		return -1;
	}

	LPRINTF("Waiting for events...\n");
	while(1) {
		platform_poll(priv);
		/* we got a shutdown request, exit */
		if (shutdown_req) {
			break;
		}
	}
	rpmsg_destroy_ept(&lept);

	return 0;
}

/*-----------------------------------------------------------------------------*
 *  Processing Task
 *-----------------------------------------------------------------------------*/
static void processing(void *unused_arg)
{
	void *platform;
	struct rpmsg_device *rpdev;

	LPRINTF("Starting application...\n");
	/* Initialize platform */
	if (platform_init(NULL, NULL, &platform)) {
		LPERROR("Failed to initialize platform.\n");
	} else {
		rpdev = platform_create_rpmsg_vdev(platform, 0,
										VIRTIO_DEV_SLAVE,
										NULL, NULL);
		if (!rpdev){
			LPERROR("Failed to create rpmsg virtio device.\n");
		} else {
			app(rpdev, platform);
			platform_release_rpmsg_vdev(rpdev);
		}
	}

	LPRINTF("Stopping application...\n");
	platform_cleanup(platform);

	/* Terminate this task */
	vTaskDelete(NULL);
}

/*-----------------------------------------------------------------------------*
 *  Application entry point
 *-----------------------------------------------------------------------------*/
int main(void)
{
	BaseType_t stat;

	/* Create the tasks */
	stat = xTaskCreate(processing, ( const char * ) "HW2",
				1024, NULL, 2, &comm_task);
	if (stat != pdPASS) {
		LPERROR("cannot create task\n");
	} else {
		/* Start running FreeRTOS tasks */
		vTaskStartScheduler();
	}

	/* Will not get here, unless a call is made to vTaskEndScheduler() */
	while (1) ;

	/* suppress compilation warnings*/
	return 0;
}
