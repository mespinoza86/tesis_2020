/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "xil_printf.h"
/*
int main()
{
    init_platform();
    print("Hello World\n\r");
    cleanup_platform();
    return 0;
}
*/

#include <iostream>
#include <string.h>
#include <cstring>
#include <math.h>
#include <memory>
#include <functional>
#include <chrono>
#include <vector>
#include <random>
#include <cassert>
//#include "statistics.hpp"
//#include "GapJunctionDriver.hpp"
//#include "ip-test.h"

//auto makeGapJunctionIP(uint nsize){return GapJunctionIP{nsize};}



int main(int argc, char** argv){
  std::cout << "Init GPIP test\n";
  using vec = std::vector<float>;
  auto runTest = [&](const vec &V,const vec &C,vec &outCurrents, std::vector<int> &times){
    auto nsize=V.size();
    std::cout << "Opening GapJunctionIP Driver devs...\n";
    //auto gjip = makeGapJunctionIP(nsize);
    std::cout << "Ready\n";
    //gjip.copyCondMatrix(C);
    for(auto &t : times){
      auto begin = std::chrono::system_clock::now();
//      gjip.copyVdend(V);
//      gjip.run();
      uint idx = 0;
//      for(auto &curr : outCurrents){curr = gjip.IcBuff(idx);idx++;}
//      auto end = std::chrono::system_clock::now();
//      auto elapsed = std::chrono::duration_cast<std::chrono::microseconds>(end-begin);
//      t=elapsed.count();
//    }

  };
  const std::vector<uint> sizes =
  {
	  100,
	  500,
	  1000,
          1100,
          1200,
          1300,
          1400,
          1500
  };
  for(auto &nsize : sizes ){
    const auto iterationsQuantity = uint(4);
    auto times = std::vector<int>(iterationsQuantity);
    std::cout << "\tNsize: " << nsize <<"\n";
    auto V_data = vec(nsize);
    auto C_data = vec(nsize*nsize);
//    fillWithRandomData(V_data,C_data);
    auto outCurrents = vec(nsize);
//    runTest(V_data,C_data,outCurrents,times);
//    auto avgElapsed = average(times);
//    auto standardDeviation = standard_deviation(times);
//    std::cout<<std::dec << "Time: "<< avgElapsed<<"\n";
//    std::cout<<std::dec << "Standard Deviation: "<< standardDeviation<<"\n";
    auto Isw = std::vector<float>(nsize);
    auto begin = std::chrono::system_clock::now();
//    SimulateSW(C_data,V_data,Isw);
    auto end = std::chrono::system_clock::now();
    auto elapsed = std::chrono::duration_cast<std::chrono::microseconds>(end-begin);
//    auto boost = static_cast<float>(elapsed.count())/avgElapsed;
//    std::cout << "SW perf: "<< elapsed.count() << "\n"<<"HW boost: "<<boost <<"\n";
//    compareResults(Isw,outCurrents);
    printf("Done compare result\n");
  }
  return 0;


}

